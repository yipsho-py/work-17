class Node:
    def __init__(self, data=None):
        # ინიციალიზაცია კვანძისთვის, რომელიც შეიცავს მონაცემებს და მომდევნო კვანძზე რეფერენსს.
        self.data = data
        self.next = None

class LinkedList:
    def __init__(self):
        # ინიციალიზაცია ცარიელი LinkedList-ისთვის; head არის პირველი კვანძის რეფერენსი.
        self.head = None

    def append(self, data):
        # ახალ კვანძს ვამატებთ ბოლოში.
        new_node = Node(data)  # ახალი კვანძის შექმნა
        if self.head is None:
            # თუ სია ცარიელია, ახალი კვანძი ხდება head.
            self.head = new_node
            return

        # ვპოულობთ ბოლო კვანძს სიაში.
        last_node = self.head
        while last_node.next:
            last_node = last_node.next

        # ბოლო კვანძის შემდეგ ვამატებთ ახალ კვანძს.
        last_node.next = new_node

    def remove_at(self, index):
        # წავშლით კვანძს მითითებულ ინდექსზე.
        if index < 0 or self.head is None:
            # თუ ინდექსი ნაკლებია ნულზე ან სია ცარიელია, არაფერი უნდა გაკეთდეს.
            return

        if index == 0:
            # თუ ინდექსი ნულია, head-ს გადავიტანთ მეორე კვანძზე.
            self.head = self.head.next
            return

        # ვეძებთ წასაშლელ კვანძს მითითებულ ინდექსზე.
        current_node = self.head
        current_position = 0

        while current_node.next and current_position < index - 1:
            current_node = current_node.next
            current_position += 1

        # თუ კვანძი არსებობს, ვცვლით მისი მომდევნო კვანძის რეფერენსს.
        if current_node.next:
            current_node.next = current_node.next.next

    def display(self):
        # სიის კვანძების მნიშვნელობების დაბეჭდვა.
        current_node = self.head
        while current_node:
            print(current_node.data, end=' -> ')
            current_node = current_node.next

        print()  # ახალი ხაზი გამოსახულების დასრულებისთვის

# LinkedList-ის ობიექტის შექმნა
linked_list = LinkedList()

# სიისთვის კვანძების დამატება
linked_list.append(50)  # ინდექსი 0
linked_list.append(15)  # ინდექსი 1
linked_list.append(20)  # ინდექსი 2
linked_list.append(11)  # ინდექსი 3
linked_list.append(5)   # ინდექსი 4
linked_list.append(25)  # ინდექსი 5

# სიის ამჟამინდელი მდგომარეობის გამოტანა
linked_list.display()

# კვანძის წაშლა ინდექსზე 2
linked_list.remove_at(2)
linked_list.display()

# კვანძის წაშლა ინდექსზე 2 კიდევ ერთხელ
linked_list.remove_at(2)
linked_list.display()

# კვანძის წაშლა ინდექსზე 0 (პირველი კვანძი)
linked_list.remove_at(0)
linked_list.display()

# კვანძის წაშლა ინდექსზე 2 კვლავ
linked_list.remove_at(2)
linked_list.display()
